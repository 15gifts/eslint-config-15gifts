// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`That the React 'invalid' file throws lint errors 1`] = `
{
  "errorCount": 23,
  "fatalErrorCount": 0,
  "filePath": "/Users/mattgreenfield/Desktop/eslint-config-15gifts/test/react/invalid.tsx",
  "fixableErrorCount": 17,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 69,
      "endColumn": 70,
      "endLine": 1,
      "fix": {
        "range": [
          61,
          80,
        ],
        "text": ""react"

interface",
      },
      "line": 1,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ImportDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 18,
      "endLine": 16,
      "fix": {
        "range": [
          295,
          394,
        ],
        "text": "children,
  href,
  loading = false,
  onClick,
  type = "button",
  variant = "primary",
  ...rest",
      },
      "line": 16,
      "message": "Expected object keys to be in sorted order. Expected loading to be before type.",
      "messageId": "sort",
      "nodeType": "Property",
      "ruleId": "sort-destructure-keys/sort-destructure-keys",
      "severity": 2,
    },
    {
      "column": 23,
      "endColumn": 24,
      "endLine": 21,
      "fix": {
        "range": [
          434,
          441,
        ],
        "text": "}
  if",
      },
      "line": 21,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 6,
      "endColumn": 7,
      "endLine": 26,
      "fix": {
        "range": [
          507,
          513,
        ],
        "text": "}
  }",
      },
      "line": 26,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ExpressionStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 14,
      "endLine": 29,
      "line": 29,
      "message": "Unexpected console statement.",
      "messageId": "unexpected",
      "nodeType": "MemberExpression",
      "ruleId": "no-console",
      "severity": 1,
    },
    {
      "column": 20,
      "endColumn": 21,
      "endLine": 29,
      "fix": {
        "range": [
          533,
          544,
        ],
        "text": ")

  const",
      },
      "line": 29,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ExpressionStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 12,
      "endLine": 33,
      "fix": {
        "range": [
          564,
          603,
        ],
        "text": "primary: "red",
    secondary: "yellow"",
      },
      "line": 33,
      "message": "Expected object keys to be in natural ascending order. 'primary' should be before 'secondary'.",
      "nodeType": "Property",
      "ruleId": "sort-keys-fix/sort-keys-fix",
      "severity": 2,
    },
    {
      "column": 4,
      "endColumn": 5,
      "endLine": 34,
      "fix": {
        "range": [
          607,
          618,
        ],
        "text": "}

  const",
      },
      "line": 34,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 4,
      "endColumn": 5,
      "endLine": 39,
      "fix": {
        "range": [
          714,
          723,
        ],
        "text": "}

  let",
      },
      "line": 39,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 8,
      "endLine": 41,
      "line": 41,
      "message": "'a' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 8,
      "endLine": 41,
      "fix": {
        "range": [
          720,
          745,
        ],
        "text": "const a = !linkProps === 2;",
      },
      "line": 41,
      "message": "'a' is never reassigned. Use 'const' instead.",
      "messageId": "useConst",
      "nodeType": "Identifier",
      "ruleId": "prefer-const",
      "severity": 2,
    },
    {
      "column": 27,
      "endColumn": 28,
      "endLine": 41,
      "fix": {
        "range": [
          743,
          754,
        ],
        "text": "2

  const",
      },
      "line": 41,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 35,
      "endColumn": 36,
      "endLine": 43,
      "fix": {
        "range": [
          776,
          791,
        ],
        "text": "false

  const",
      },
      "line": 43,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 42,
      "endColumn": 4,
      "endLine": 47,
      "fix": {
        "range": [
          825,
          851,
        ],
        "text": "!loading",
      },
      "line": 45,
      "message": "Unexpected block statement surrounding arrow body; move the returned value immediately after the \`=>\`.",
      "messageId": "unexpectedSingleBlock",
      "nodeType": "ArrowFunctionExpression",
      "ruleId": "arrow-body-style",
      "severity": 2,
    },
    {
      "column": 20,
      "endColumn": 21,
      "endLine": 46,
      "fix": {
        "range": [
          839,
          851,
        ],
        "text": "loading
  }",
      },
      "line": 46,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ReturnStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 6,
      "endColumn": 8,
      "endLine": 47,
      "line": 47,
      "message": "React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.",
      "nodeType": "ArrayExpression",
      "ruleId": "react-hooks/exhaustive-deps",
      "severity": 2,
      "suggestions": [
        {
          "desc": "Update the dependencies array to be: [loading]",
          "fix": {
            "range": [
              853,
              855,
            ],
            "text": "[loading]",
          },
        },
      ],
    },
    {
      "column": 9,
      "endColumn": 10,
      "endLine": 47,
      "fix": {
        "range": [
          855,
          863,
        ],
        "text": ")

  if",
      },
      "line": 47,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 16,
      "endColumn": 17,
      "endLine": 50,
      "fix": {
        "range": [
          895,
          904,
        ],
        "text": "null
  }",
      },
      "line": 50,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ReturnStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 15,
      "endColumn": 21,
      "endLine": 53,
      "line": 53,
      "message": "'setFoo' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 2,
    },
    {
      "column": 25,
      "endColumn": 33,
      "endLine": 53,
      "line": 53,
      "message": "React Hook "useState" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
      "nodeType": "Identifier",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": 2,
    },
    {
      "column": 36,
      "endColumn": 37,
      "endLine": 53,
      "fix": {
        "range": [
          940,
          952,
        ],
        "text": ")

  return",
      },
      "line": 53,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 13,
      "endColumn": 17,
      "endLine": 57,
      "line": 57,
      "message": "The button type attribute must be specified by a static string or a trivial ternary expression",
      "messageId": "complexType",
      "nodeType": "Identifier",
      "ruleId": "react/button-has-type",
      "severity": 2,
    },
    {
      "column": 7,
      "endColumn": 21,
      "endLine": 59,
      "line": 59,
      "message": "Prop spreading is forbidden",
      "messageId": "noSpreading",
      "nodeType": "JSXSpreadAttribute",
      "ruleId": "react/jsx-props-no-spreading",
      "severity": 1,
    },
    {
      "column": 7,
      "endColumn": 16,
      "endLine": 62,
      "line": 62,
      "message": "Unknown property 'foo' found",
      "messageId": "unknownProp",
      "nodeType": "JSXAttribute",
      "ruleId": "react/no-unknown-property",
      "severity": 2,
    },
    {
      "column": 4,
      "endColumn": 5,
      "endLine": 66,
      "fix": {
        "range": [
          1130,
          1134,
        ],
        "text": ")
}",
      },
      "line": 66,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ReturnStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
  ],
  "source": "import React, { useCallback, type ReactNode, useState } from "react";

interface ButtonProps {
  children: ReactNode;
  type?: "submit" | "button" | "reset";
  loading?: boolean;
  onClick?: () => void;
  href?: string;
  variant?: "primary" | "secondary";
}

export default function Button({
  children,
  href,
  type = "button",
  loading = false,
  onClick,
  variant = "primary",
  ...rest
}: ButtonProps) {
  const linkProps = {};
  if (href) {
    linkProps = {
      component: "a",
      href,
    };
  }

  console.log(rest);

  const variantMap = {
    secondary: "yellow",
    primary: "red",
  };

  const styles = {
    ...variantMap,
    backgroundColor:   variantMap[variant], // prettier-ignore
  };

  let a = !linkProps === 2;

  const loading = loading || false;

  const shouldRender = useCallback(() => {
    return !loading;
  }, []);

  if (!shouldRender()) {
    return null;
  }

  const [foo, setFoo] = useState(3);

  return (
    <button
      type={type}
      onClick={onClick}
      {...linkProps}
      style={styles}
      loading={loading}
      foo={foo}
    >
      {children}
    </button>
  );
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
    {
      "replacedBy": [],
      "ruleId": "no-return-await",
    },
  ],
  "warningCount": 2,
}
`;

exports[`That the React 'valid' file passes 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "filePath": "/Users/mattgreenfield/Desktop/eslint-config-15gifts/test/react/valid.tsx",
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 7,
      "endColumn": 21,
      "endLine": 42,
      "line": 42,
      "message": "Prop spreading is forbidden",
      "messageId": "noSpreading",
      "nodeType": "JSXSpreadAttribute",
      "ruleId": "react/jsx-props-no-spreading",
      "severity": 1,
    },
  ],
  "source": "import React, { type ReactNode } from 'react'

interface ButtonProps {
  children: ReactNode;
  type?: 'submit' | 'button' | 'reset';
  onClick?: () => void;
  href?: string;
  variant?: 'primary' | 'secondary';
  loading?: boolean;
}

export default function Button({
  children,
  href,
  loading = false,
  onClick,
  type = 'button',
  variant = 'primary',
}: ButtonProps) {
  let linkProps = {}
  if (href) {
    linkProps = {
      component: 'a',
      href,
    }
  }

  const variantMap = {
    primary: 'red',
    secondary: 'yellow',
  }

  const styles = {
    backgroundColor: variantMap[variant],
  }

  /* eslint-disable react/button-has-type */
  return (
    <button
      type={type}
      onClick={onClick}
      {...linkProps}
      style={styles}
      loading={loading}
    >
      {children}
    </button>
  )
}
",
  "suppressedMessages": [
    {
      "column": 13,
      "endColumn": 17,
      "endLine": 40,
      "line": 40,
      "message": "The button type attribute must be specified by a static string or a trivial ternary expression",
      "messageId": "complexType",
      "nodeType": "Identifier",
      "ruleId": "react/button-has-type",
      "severity": 2,
      "suppressions": [
        {
          "justification": "",
          "kind": "directive",
        },
      ],
    },
  ],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
    {
      "replacedBy": [],
      "ruleId": "no-return-await",
    },
  ],
  "warningCount": 1,
}
`;

exports[`That the base 'invalid' file throws lint errors 1`] = `
{
  "errorCount": 13,
  "fatalErrorCount": 0,
  "filePath": "/Users/mattgreenfield/Desktop/eslint-config-15gifts/test/base/invalid.js",
  "fixableErrorCount": 12,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 15,
      "endColumn": 16,
      "endLine": 5,
      "fix": {
        "range": [
          117,
          134,
        ],
        "text": "defaults
  const",
      },
      "line": 5,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 45,
      "endColumn": 46,
      "endLine": 6,
      "fix": {
        "range": [
          170,
          180,
        ],
        "text": "]
  const",
      },
      "line": 6,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 60,
      "endColumn": 61,
      "endLine": 7,
      "fix": {
        "range": [
          231,
          243,
        ],
        "text": "]

  return",
      },
      "line": 7,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 9,
      "endLine": 11,
      "fix": {
        "range": [
          250,
          342,
        ],
        "text": "hair: \`\${hairLength} and \${hairColor}\`,
    hobbies: [...favouriteSports, ...favouriteMusic]",
      },
      "line": 11,
      "message": "Expected object keys to be in natural ascending order. 'hair' should be before 'hobbies'.",
      "nodeType": "Property",
      "ruleId": "sort-keys-fix/sort-keys-fix",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 8,
      "endLine": 12,
      "fix": {
        "range": [
          304,
          366,
        ],
        "text": "age: parseInt(age),
    hair: \`\${hairLength} and \${hairColor}\`",
      },
      "line": 12,
      "message": "Expected object keys to be in natural ascending order. 'age' should be before 'hair'.",
      "nodeType": "Property",
      "ruleId": "sort-keys-fix/sort-keys-fix",
      "severity": 2,
    },
    {
      "column": 10,
      "endColumn": 23,
      "endLine": 12,
      "line": 12,
      "message": "Missing radix parameter.",
      "messageId": "missingRadix",
      "nodeType": "CallExpression",
      "ruleId": "radix",
      "severity": 2,
      "suggestions": [
        {
          "desc": "Add radix parameter \`10\` for parsing decimal numbers.",
          "fix": {
            "range": [
              365,
              365,
            ],
            "text": ", 10",
          },
          "messageId": "addRadixParameter10",
        },
      ],
    },
    {
      "column": 4,
      "endColumn": 5,
      "endLine": 14,
      "fix": {
        "range": [
          380,
          384,
        ],
        "text": "}
}",
      },
      "line": 14,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ReturnStatement",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 2,
      "endColumn": 3,
      "endLine": 15,
      "fix": {
        "range": [
          383,
          392,
        ],
        "text": "}

const",
      },
      "line": 15,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 10,
      "endLine": 19,
      "fix": {
        "range": [
          432,
          467,
        ],
        "text": "color: "blonde",
    length: "long"",
      },
      "line": 19,
      "message": "Expected object keys to be in natural ascending order. 'color' should be before 'length'.",
      "nodeType": "Property",
      "ruleId": "sort-keys-fix/sort-keys-fix",
      "severity": 2,
    },
    {
      "column": 20,
      "endColumn": 21,
      "endLine": 19,
      "fix": {
        "range": [
          459,
          470,
        ],
        "text": ""blonde" }",
      },
      "line": 19,
      "message": "Unexpected trailing comma.",
      "messageId": "unexpected",
      "nodeType": "Property",
      "ruleId": "comma-dangle",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 6,
      "endLine": 20,
      "fix": {
        "range": [
          424,
          499,
        ],
        "text": "// prettier-ignore
age: 4, 
  hair: { length: "long",
    color: "blonde", }",
      },
      "line": 20,
      "message": "Expected object keys to be in natural ascending order. 'age' should be before 'hair'.",
      "nodeType": "Property",
      "ruleId": "sort-keys-fix/sort-keys-fix",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 4,
      "endLine": 21,
      "fix": {
        "range": [
          502,
          512,
        ],
        "text": ")

export",
      },
      "line": 21,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "VariableDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
    {
      "column": 23,
      "endColumn": 24,
      "endLine": 23,
      "fix": {
        "range": [
          527,
          529,
        ],
        "text": "]",
      },
      "line": 23,
      "message": "Extra semicolon.",
      "messageId": "extraSemi",
      "nodeType": "ExportDefaultDeclaration",
      "ruleId": "@typescript-eslint/semi",
      "severity": 2,
    },
  ],
  "source": "const getPerson = (name, defaults) => {
  const {
    age,
    hair: { color: hairColor, length: hairLength },
  } = defaults;
  const favouriteSports = ["golf", "tennis"];
  const favouriteMusic = ["reggae", "blues", "death metal"];

  return {
    hobbies: [...favouriteSports, ...favouriteMusic],
    hair: \`\${hairLength} and \${hairColor}\`,
    age: parseInt(age),
    name,
  };
};

const barry = getPerson("barry", {
  hair: { length: "long",
    color: "blonde", }, // prettier-ignore
  age: 4,
});

export default [barry];
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
    {
      "replacedBy": [],
      "ruleId": "no-return-await",
    },
  ],
  "warningCount": 0,
}
`;

exports[`That the base 'valid' file passes 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "filePath": "/Users/mattgreenfield/Desktop/eslint-config-15gifts/test/base/valid.js",
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    {
      "replacedBy": [],
      "ruleId": "global-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-buffer-constructor",
    },
    {
      "replacedBy": [],
      "ruleId": "no-new-require",
    },
    {
      "replacedBy": [],
      "ruleId": "no-path-concat",
    },
    {
      "replacedBy": [],
      "ruleId": "no-return-await",
    },
  ],
  "warningCount": 0,
}
`;
