// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React config That the React 'valid' file passes 1`] = `
[
  {
    "column": 7,
    "endColumn": 21,
    "endLine": 42,
    "line": 42,
    "message": "Prop spreading is forbidden",
    "messageId": "noSpreading",
    "nodeType": "JSXSpreadAttribute",
    "ruleId": "react/jsx-props-no-spreading",
    "severity": 1,
  },
]
`;

exports[`React config That the react 'invalid' file throws lint errors 1`] = `
[
  {
    "column": 69,
    "endColumn": 70,
    "endLine": 1,
    "fix": {
      "range": [
        61,
        80,
      ],
      "text": ""react"

interface",
    },
    "line": 1,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ImportDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 3,
    "endColumn": 18,
    "endLine": 16,
    "fix": {
      "range": [
        295,
        394,
      ],
      "text": "children,
  href,
  loading = false,
  onClick,
  type = "button",
  variant = "primary",
  ...rest",
    },
    "line": 16,
    "message": "Expected object keys to be in sorted order. Expected loading to be before type.",
    "messageId": "sort",
    "nodeType": "Property",
    "ruleId": "sort-destructure-keys/sort-destructure-keys",
    "severity": 2,
  },
  {
    "column": 23,
    "endColumn": 24,
    "endLine": 21,
    "fix": {
      "range": [
        434,
        441,
      ],
      "text": "}
  if",
    },
    "line": 21,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 6,
    "endColumn": 7,
    "endLine": 26,
    "fix": {
      "range": [
        507,
        513,
      ],
      "text": "}
  }",
    },
    "line": 26,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ExpressionStatement",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 3,
    "endColumn": 14,
    "endLine": 29,
    "line": 29,
    "message": "Unexpected console statement.",
    "messageId": "unexpected",
    "nodeType": "MemberExpression",
    "ruleId": "no-console",
    "severity": 1,
  },
  {
    "column": 20,
    "endColumn": 21,
    "endLine": 29,
    "fix": {
      "range": [
        533,
        544,
      ],
      "text": ")

  const",
    },
    "line": 29,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ExpressionStatement",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 5,
    "endColumn": 12,
    "endLine": 33,
    "fix": {
      "range": [
        564,
        603,
      ],
      "text": "primary: "red",
    secondary: "yellow"",
    },
    "line": 33,
    "message": "Expected object keys to be in natural ascending order. 'primary' should be before 'secondary'.",
    "nodeType": "Property",
    "ruleId": "sort-keys-fix/sort-keys-fix",
    "severity": 2,
  },
  {
    "column": 4,
    "endColumn": 5,
    "endLine": 34,
    "fix": {
      "range": [
        607,
        618,
      ],
      "text": "}

  const",
    },
    "line": 34,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 4,
    "endColumn": 5,
    "endLine": 39,
    "fix": {
      "range": [
        714,
        723,
      ],
      "text": "}

  let",
    },
    "line": 39,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 8,
    "endLine": 41,
    "line": 41,
    "message": "'a' is assigned a value but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 8,
    "endLine": 41,
    "fix": {
      "range": [
        720,
        745,
      ],
      "text": "const a = !linkProps === 2;",
    },
    "line": 41,
    "message": "'a' is never reassigned. Use 'const' instead.",
    "messageId": "useConst",
    "nodeType": "Identifier",
    "ruleId": "prefer-const",
    "severity": 2,
  },
  {
    "column": 27,
    "endColumn": 28,
    "endLine": 41,
    "fix": {
      "range": [
        743,
        754,
      ],
      "text": "2

  const",
    },
    "line": 41,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 35,
    "endColumn": 36,
    "endLine": 43,
    "fix": {
      "range": [
        776,
        791,
      ],
      "text": "false

  const",
    },
    "line": 43,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 42,
    "endColumn": 4,
    "endLine": 47,
    "fix": {
      "range": [
        825,
        851,
      ],
      "text": "!loading",
    },
    "line": 45,
    "message": "Unexpected block statement surrounding arrow body; move the returned value immediately after the \`=>\`.",
    "messageId": "unexpectedSingleBlock",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "arrow-body-style",
    "severity": 2,
  },
  {
    "column": 20,
    "endColumn": 21,
    "endLine": 46,
    "fix": {
      "range": [
        839,
        851,
      ],
      "text": "loading
  }",
    },
    "line": 46,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ReturnStatement",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 6,
    "endColumn": 8,
    "endLine": 47,
    "line": 47,
    "message": "React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.",
    "nodeType": "ArrayExpression",
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 2,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: [loading]",
        "fix": {
          "range": [
            853,
            855,
          ],
          "text": "[loading]",
        },
      },
    ],
  },
  {
    "column": 9,
    "endColumn": 10,
    "endLine": 47,
    "fix": {
      "range": [
        855,
        863,
      ],
      "text": ")

  if",
    },
    "line": 47,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 16,
    "endColumn": 17,
    "endLine": 50,
    "fix": {
      "range": [
        895,
        904,
      ],
      "text": "null
  }",
    },
    "line": 50,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ReturnStatement",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 15,
    "endColumn": 21,
    "endLine": 53,
    "line": 53,
    "message": "'setFoo' is assigned a value but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 25,
    "endColumn": 33,
    "endLine": 53,
    "line": 53,
    "message": "React Hook "useState" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
    "nodeType": "Identifier",
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
  },
  {
    "column": 36,
    "endColumn": 37,
    "endLine": 53,
    "fix": {
      "range": [
        940,
        952,
      ],
      "text": ")

  return",
    },
    "line": 53,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "VariableDeclaration",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
  {
    "column": 13,
    "endColumn": 17,
    "endLine": 57,
    "line": 57,
    "message": "The button type attribute must be specified by a static string or a trivial ternary expression",
    "messageId": "complexType",
    "nodeType": "Identifier",
    "ruleId": "react/button-has-type",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 21,
    "endLine": 59,
    "line": 59,
    "message": "Prop spreading is forbidden",
    "messageId": "noSpreading",
    "nodeType": "JSXSpreadAttribute",
    "ruleId": "react/jsx-props-no-spreading",
    "severity": 1,
  },
  {
    "column": 7,
    "endColumn": 16,
    "endLine": 62,
    "line": 62,
    "message": "Unknown property 'foo' found",
    "messageId": "unknownProp",
    "nodeType": "JSXAttribute",
    "ruleId": "react/no-unknown-property",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 22,
    "endLine": 64,
    "fix": {
      "range": [
        1103,
        1118,
      ],
      "text": "{children}",
    },
    "line": 64,
    "message": "Fragments should contain more than one child - otherwise, thereâ€™s no need for a Fragment at all.",
    "messageId": "NeedsMoreChildren",
    "nodeType": "JSXFragment",
    "ruleId": "react/jsx-no-useless-fragment",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 22,
    "endLine": 64,
    "fix": {
      "range": [
        1103,
        1118,
      ],
      "text": "{children}",
    },
    "line": 64,
    "message": "Passing a fragment to an HTML element is useless.",
    "messageId": "ChildOfHtmlElement",
    "nodeType": "JSXFragment",
    "ruleId": "react/jsx-no-useless-fragment",
    "severity": 2,
  },
  {
    "column": 4,
    "endColumn": 5,
    "endLine": 66,
    "fix": {
      "range": [
        1135,
        1139,
      ],
      "text": ")
}",
    },
    "line": 66,
    "message": "Extra semicolon.",
    "messageId": "extraSemi",
    "nodeType": "ReturnStatement",
    "ruleId": "@typescript-eslint/semi",
    "severity": 2,
  },
]
`;
